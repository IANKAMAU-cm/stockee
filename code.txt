from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from models import db, User

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
#db = SQLAlchemy(app)

#initialize the db with the flask app
db.init_app(app)

# user model
#class User(db.Model):
#    id = db.Column(db.Integer, primary_key=True)
#    username = db.Column(db.String(150), nullable=False, unique=True)
#    password = db.Column(db.String(150), nullable=False)

#create the db
#with app.app_context():
#    db.create_all()

#route for login page
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            return redirect(url_for('index'))
        else:
            flash('Login Failed. Check your Username and Password.')
            return redirect(url_for('login'))
    
    # If it's a GET request, render the login page
    return render_template('login.html')





#route for account creation
@app.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        #check if user exists
        if User.query.filter_by(username=username).first():
            flash('Username already exists')
            return redirect(url_for('register'))
        
        #create new user
        #new_user = User(username=username, password=password)
        hashed_password = generate_password_hash(request.form['password'], method='sha256')
        new_user = User(username=request.form['username'], password=hashed_password)
        db.session.add(new_user)
        db.session.commit()

        flash('Account created successfully. Proceed to log in')
        return redirect(url_for('login'))
    return render_template('register.html')

# route for the dashboard page
@app.route('/')
def index():
    if 'user_id' not in session:
        flash('Please log in to access the dashboard')
        return redirect(url_for('login'))
    return render_template('index.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    flash('You have been logged out.', 'info')
    return redirect(url_for('login'))

if __name__ == '__main__':
    with app.app_context():
        db.drop_all()
        db.create_all()
    app.run(debug=True)





Database Migration with Flask-Migrate

To handle schema changes and migrations more efficiently, consider using Flask-Migrate. This tool helps manage database schema changes and is useful for evolving your schema over time.

To get started with Flask-Migrate:

    Install Flask-Migrate:

    bash

pip install Flask-Migrate

Update Your Flask App:

python

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Your models here

Initialize Migrations:

Run the following command to initialize migrations:

bash

flask db init

Create a Migration Script:

Whenever you make changes to your models, create a new migration script:

bash

flask db migrate -m "description of changes"

Apply Migrations:

Apply the migration script to update your database schema:

bash

flask db upgrade
